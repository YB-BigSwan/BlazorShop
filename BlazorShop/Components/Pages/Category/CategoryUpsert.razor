@page "/category/create"
@page "/category/edit/{Id:int}"
@rendermode InteractiveServer
@inject ICategoryRepository CategoryRepository
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime

<PageTitle>@Title Category</PageTitle>
<div class="row my-2">
    <h3 class="card-title text-primary mb-3 ml-3">@Title Category</h3>

    <div class="col-6">
        @if (IsLoading)
        {
            <div class="text-center">
                <img src="/assets/loading.gif" alt="a loading gif">
            </div>
        }
        else
        {
            <EditForm Model="Category" OnValidSubmit="UpsertCategory">
                <DataAnnotationsValidator/>
                <div class="form-group">
                    <label >Name *</label>
                    <InputText @bind-Value="Category.Name" class="form-control"></InputText>
                    <ValidationMessage For="() => Category.Name"/>
                </div>
                <div class="form-group mt-2">
                    <button class="btn btn-primary">@Title</button>
                    <NavLink href="category" class="btn btn-danger">Cancel</NavLink>
                </div>
            </EditForm>
        }
    </div>
</div>

@code {
    [Parameter] public int Id { get; set; }

    private CategoryDTO Category { get; set; } = new CategoryDTO();
    private string Title { get; set; } = "Create";
    public bool IsLoading { get; set; } 

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (Id == 0)
            {
                IsLoading = false;
            }
            else
            {
                Title = "Update";
                await LoadCategory();
            }
        }
    }

    private async Task LoadCategory()
    {
        IsLoading = true;
        StateHasChanged();
        Category = await CategoryRepository.Get(Id);
        IsLoading = false;
        StateHasChanged();
    }

    private async Task UpsertCategory()
    {
        if (Category.Id == 0)
        {
            await CategoryRepository.Create(Category);
        }
        else
        {
            await CategoryRepository.Update(Category);
        }

        NavigationManager.NavigateTo("category");
    }

}