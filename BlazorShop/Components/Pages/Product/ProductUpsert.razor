@page "/product/create"
@page "/product/edit/{Id:int}"
@using BlazorShop.Service.IService
@rendermode InteractiveServer
@inject ICategoryRepository CategoryRepository
@inject IProductRepository ProductRepository
@inject NavigationManager NavigationManager
@inject IFileUpload FileUpload
@inject IJSRuntime JsRuntime


<PageTitle>@Title Product</PageTitle>
<div class="row my-2">
    <h3 class="card-title text-primary mb-3 ml-3">@Title Product</h3>

    <div class="col-md-10">
        @if (IsLoading)
        {
            <div class="text-center">
                <img src="/assets/loading.gif" alt="a loading gif">
            </div>
        }
        else
        {
            <EditForm Model="Product" OnValidSubmit="UpsertProduct" Disabled="@IsLoading">
                <DataAnnotationsValidator/>
                <div class="form-group">
                    <label >Name *</label>
                    <InputText @bind-Value="Product.Name" class="form-control"></InputText>
                    <ValidationMessage For="() => Product.Name"/>
                </div>
                <div class="form-group">
                    <label >Color *</label>
                    <InputText @bind-Value="Product.Color" class="form-control"></InputText>
                    <ValidationMessage For="() => Product.Color"/>
                </div>
                <div class="form-group">
                    <label >Description</label>
                    <InputTextArea @bind-Value="Product.Description" class="form-control"></InputTextArea>
                    <ValidationMessage For="() => Product.Description"/>
                </div>
                <div class="row pt-3">
                    <div class="form-group col-6">
                        <div class="form-check">
                            <InputCheckbox @bind-Value="Product.ShopFavorites" class="form-check-input"></InputCheckbox>
                            <label for="" class="form-check-label">Is Shop Favorites</label>
                        </div>
                    </div>
                    <div class="form-group col-6">
                        <div class="form-check">
                            <InputCheckbox @bind-Value="Product.CustomerFavorites" class="form-check-input"></InputCheckbox>
                            <label for="" class="form-check-label">Is Customer Favorites</label>
                        </div>
                    </div>
                    <div class="form-group col-6">
                        <label>Category</label>
                        <InputSelect @bind-Value="@Product.CategoryId" class="form-select">
                            <option value="0" disabled="disabled" selected>-- Select Category --</option>
                            @foreach (var cat in Categories)
                            {
                                <option value="@cat.Id">@cat.Name</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="() => Product.CategoryId"/>
                    </div>
                    <div class="form-group col-6 pt-4">
                        <InputFile OnChange="HandleImageUpload"></InputFile>
                    </div>
                </div>
                <div class="form-group mt-2">
                    <button class="btn btn-primary">@Title</button>
                    <NavLink href="product" class="btn btn-danger">Cancel</NavLink>
                </div>
            </EditForm>
        }
    </div>
    <div class="col-md-2">
        <img src="@Product.ImageUrl" alt="Product image" class="w-100">
    </div>
</div>

@code {
    [Parameter] public int Id { get; set; }

    private ProductDTO Product { get; set; } = new ProductDTO()
    {
        ImageUrl = "/assets/default.png"
    };
    private IEnumerable<CategoryDTO> Categories { get; set; } = new List<CategoryDTO>();
    private string Title { get; set; } = "Create";
    private bool IsLoading { get; set; } 
    public string OldImageUrl { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadProduct();
        }
    }

    private async Task LoadProduct()
    {
        IsLoading = true;
        StateHasChanged();
        Categories = await CategoryRepository.GetAll();
        if (Id != 0)
        {
            Title = "Update";
            Product = await ProductRepository.Get(Id);
            OldImageUrl = Product.ImageUrl;
        }
        IsLoading = false;
        StateHasChanged();
    }

    private async Task UpsertProduct()
    {
        if (Product.Id == 0)
        {
            await ProductRepository.Create(Product);
            await JsRuntime.ToastrSuccess($"{Product.Name} created successfully.");
        }
        else
        {
            if (OldImageUrl != Product.ImageUrl)
            {
                FileUpload.DeleteFile(OldImageUrl);
            }
            await ProductRepository.Update(Product);
            await JsRuntime.ToastrSuccess($"{Product.Name} uodated successfully.");
        }

        NavigationManager.NavigateTo("product");
    }

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        IsLoading = true;
        try
        {
            if (e.GetMultipleFiles().Count > 0)
            {
                foreach (var file in e.GetMultipleFiles())
                {
                    FileInfo fileInfo = new FileInfo(file.Name);
                    if (fileInfo.Extension.ToLower() == ".jpg" ||
                        fileInfo.Extension.ToLower() == ".png" ||
                        fileInfo.Extension.ToLower() == ".jpeg")
                    {
                        Product.ImageUrl = await FileUpload.UploadFile(file);
                        await JsRuntime.ToastrSuccess($"{file.Name} uploaded successfully");
                    }
                    else
                    {
                            await JsRuntime.ToastrError("Failed to upload image! Make sure the file you are trying to upload is .jpg/.jpeg/.png");
                            return;
                    }
                }
            }

            IsLoading = false;
        }
        catch (Exception ex)
        {
            await JsRuntime.ToastrError(ex.Message);
        }
    }
}