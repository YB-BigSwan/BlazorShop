@page "/product/price/{Id:int}"
@rendermode InteractiveServer
@inject IProductPriceRepository ProductPriceRepository
@inject IProductRepository ProductRepository

<PageTitle>Product Prices</PageTitle>
<h1>@Product.Name Price Management</h1>

@if (IsLoading)
{
    <div class="text-center">
        <img src="/assets/loading.gif" alt="a loading gif">
    </div>
}
else
{
    <div class="row border p-2 mb-4">
        <div class="col-11">
            <div class="card-body">
                <h4>@Product.Name Pricing</h4><br/>
                <span>Category: @Product.Category.Name</span><br/>
                <span>Description: @Product.Description</span><br/>
            </div>
        </div>
    </div>
    <SfGrid @ref="productPriceGrid" DataSource="@ProductPrices" AllowPaging="true" AllowFiltering="true" AllowSorting="true"
            Toolbar="@(new List<string> { "Add", "Edit", "Update", "Delete", "Cancel" })">
        <GridEditSettings AllowAdding="true" AllowEditing="true" ShowDeleteConfirmDialog="true" AllowDeleting="true"></GridEditSettings>
        <GridEvents OnActionBegin="ActionHandler" TValue="ProductPriceDTO"></GridEvents>
        <GridFilterSettings Type="FilterType.Menu"></GridFilterSettings>
        <GridSortSettings AllowUnsort="false">
            <GridSortColumns>
                <GridSortColumn Field="Price" Direction="SortDirection.Ascending"></GridSortColumn>
            </GridSortColumns>
        </GridSortSettings>
        <GridPageSettings PageSize="5" PageCount="5" PageSizes="true"></GridPageSettings>
        <GridColumns>
            <GridColumn IsPrimaryKey="true" AllowAdding="false" Field=@nameof(ProductPriceDTO.Id) HeaderText="ID"></GridColumn>
            <GridColumn Field=@nameof(ProductPriceDTO.Size) HeaderText="Size">
                <EditTemplate>
                    <Syncfusion.Blazor.DropDowns.SfDropDownList DataSource="SizeList" TItem="string" TValue="string"
                                                                @bind-Value="((context as ProductPriceDTO).Size)">

                    </Syncfusion.Blazor.DropDowns.SfDropDownList>
                </EditTemplate>
            </GridColumn>
            <GridColumn Field=@nameof(ProductPriceDTO.Price) HeaderText="Price" Format="C2"></GridColumn>
            <GridColumn HeaderText="Manage Records" Width="150">
                <GridCommandColumns>
                    <GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-edit", CssClass = "e-flat" })"></GridCommandColumn>
                    <GridCommandColumn Type="CommandButtonType.Delete" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-delete", CssClass = "e-flat" })"></GridCommandColumn>
                    <GridCommandColumn Type="CommandButtonType.Save" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-update", CssClass = "e-flat" })"></GridCommandColumn>
                    <GridCommandColumn Type="CommandButtonType.Cancel" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-cancel-icon", CssClass = "e-flat" })"></GridCommandColumn>
                </GridCommandColumns>
            </GridColumn>
        </GridColumns>
    </SfGrid>
    <NavLink href="product" class="btn btn-primary pt-3">Back to products</NavLink>
}

@code {
    [Parameter] public int Id { get; set; }
    private ProductDTO Product { get; set; } = new();
    private IEnumerable<ProductPriceDTO> ProductPrices { get; set; } = new List<ProductPriceDTO>();
    public bool IsLoading { get; set; } = true;
    public SfGrid<ProductPriceDTO> productPriceGrid;

    IEnumerable<String> SizeList = new List<String>()
    {
        "Small", "Medium", "Large", "d20", "6d6", "Full Set"
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            IsLoading = true;
            StateHasChanged();
            Product = await ProductRepository.Get(Id);
            ProductPrices = await ProductPriceRepository.GetAll(Id);
            IsLoading = false;
            StateHasChanged();
        }
    }

    public async void ActionHandler(ActionEventArgs<ProductPriceDTO> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            args.Data.ProductId = Id;
            if (args.Action == "Add")
            {
                await ProductPriceRepository.Create(args.Data);
                ProductPrices = await ProductPriceRepository.GetAll(Id);
                productPriceGrid.Refresh();
            }

            if (args.Action == "Edit")
            {
                await ProductPriceRepository.Update(args.Data);
            }
        }

        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete))
        {
            await ProductPriceRepository.Delete(args.Data.Id);
            productPriceGrid.Refresh();
        }
    }

}